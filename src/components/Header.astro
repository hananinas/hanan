---
import { LOGO_IMAGE, SITE } from "@config";
import Hr from "./Hr.astro";
import LinkButton from "./LinkButton.astro";
const logoSVG = "/images/logo.svg";
const logoSVG_dark = "/images/logo-dark.svg";

export interface Props {
  activeNav?: "projects" | "skils" | "about" | "search";
}

const { activeNav } = Astro.props;
---

<header>
  <a id="skip-to-content" href="#main-content">Skip to content</a>
  <div class="nav-container">
    <div class="top-nav-wrap">
      <a href="/" class="logo">
        {
          LOGO_IMAGE.enable ? (
           
          
            <img id="logo"
              src={logoSVG_dark}
              alt="Hanan Logo"
              width={LOGO_IMAGE.width}
              height={LOGO_IMAGE.height}
            />
            <img id="dark-logo"
              src={LOGO_IMAGE.svg ? logoSVG:logoSVG}
              alt="Hanan Logo"
              width={LOGO_IMAGE.width}
              height={LOGO_IMAGE.height}
            />
          ) : (
            SITE.title
          )
        }
      </a>
      <nav id="nav-menu">
        <button
          class="hamburger-menu focus-outline"
          type="button"
          aria-label="Open Menu"
          aria-expanded="false"
          aria-controls="menu-items"
        >
          <div class="icon-container flex">
            <div id="first-line"></div>
            <div id="second-line"></div>
            <div id="third-line"></div>
          </div>
        </button>
        <ul id="menu-items" class="menu-list hidden sm:flex">
          <li>
            <a
              href="/projects"
              class={`nav-link ${activeNav === "projects" ? "active" : ""}`}
            >
              <span class="text-[#D90416]">~/</span>Projects
            </a>
          </li>
          <li>
            <a
              href="/skils"
              class={`nav-link ${activeNav === "skils" ? "active" : ""}`}
            >
              <span class="text-[#D90416]">~/</span>Skils
            </a>
          </li>
          <li>
            <a
              href="/about"
              class={`nav-link ${activeNav === "about" ? "active" : ""}`}
            >
              <span class="text-[#D90416]">~/</span>About me
            </a>
          </li>
          <li>
            <LinkButton
              href="/search"
              className={`focus-outline p-3 sm:p-1 ${
                activeNav === "search" ? "active" : ""
              }`}
              ariaLabel="search"
              title="Search"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="scale-125 sm:scale-100"
                ><path
                  d="M19.023 16.977a35.13 35.13 0 0 1-1.367-1.384c-.372-.378-.596-.653-.596-.653l-2.8-1.337A6.962 6.962 0 0 0 16 9c0-3.859-3.14-7-7-7S2 5.141 2 9s3.14 7 7 7c1.763 0 3.37-.66 4.603-1.739l1.337 2.8s.275.224.653.596c.387.363.896.854 1.384 1.367l1.358 1.392.604.646 2.121-2.121-.646-.604c-.379-.372-.885-.866-1.391-1.36zM9 14c-2.757 0-5-2.243-5-5s2.243-5 5-5 5 2.243 5 5-2.243 5-5 5z"
                ></path>
              </svg>
            </LinkButton>
          </li>
          <li>
            {
              SITE.lightAndDarkMode && (
                <button
                  id="theme-btn"
                  class="focus-outline"
                  title="Toggles light & dark"
                  aria-label="auto"
                  aria-live="polite"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" id="moon-svg">
                    <path d="M20.742 13.045a8.088 8.088 0 0 1-2.077.271c-2.135 0-4.14-.83-5.646-2.336a8.025 8.025 0 0 1-2.064-7.723A1 1 0 0 0 9.73 2.034a10.014 10.014 0 0 0-4.489 2.582c-3.898 3.898-3.898 10.243 0 14.143a9.937 9.937 0 0 0 7.072 2.93 9.93 9.93 0 0 0 7.07-2.929 10.007 10.007 0 0 0 2.583-4.491 1.001 1.001 0 0 0-1.224-1.224zm-2.772 4.301a7.947 7.947 0 0 1-5.656 2.343 7.953 7.953 0 0 1-5.658-2.344c-3.118-3.119-3.118-8.195 0-11.314a7.923 7.923 0 0 1 2.06-1.483 10.027 10.027 0 0 0 2.89 7.848 9.972 9.972 0 0 0 7.848 2.891 8.036 8.036 0 0 1-1.484 2.059z" />
                  </svg>
                  <svg xmlns="http://www.w3.org/2000/svg" id="sun-svg">
                    <path d="M6.993 12c0 2.761 2.246 5.007 5.007 5.007s5.007-2.246 5.007-5.007S14.761 6.993 12 6.993 6.993 9.239 6.993 12zM12 8.993c1.658 0 3.007 1.349 3.007 3.007S13.658 15.007 12 15.007 8.993 13.658 8.993 12 10.342 8.993 12 8.993zM10.998 19h2v3h-2zm0-17h2v3h-2zm-9 9h3v2h-3zm17 0h3v2h-3zM4.219 18.363l2.12-2.122 1.415 1.414-2.12 2.122zM16.24 6.344l2.122-2.122 1.414 1.414-2.122 2.122zM6.342 7.759 4.22 5.637l1.415-1.414 2.12 2.122zm13.434 10.605-1.414 1.414-2.122-2.122 1.414-1.414z" />
                  </svg>
                </button>
              )
            }
          </li>
        </ul>
      </nav>
    </div>
  </div>
</header>

<style>
  @reference "../styles/base.css";

  #skip-to-content {
    @apply absolute -top-full left-16 z-50 bg-skin-accent py-2 px-3 text-skin-inverted transition-all focus:top-4;
  }
  .nav-container {
    @apply mx-auto flex max-w-[75rem] items-center justify-between px-4 sm:px-6;
  }
  .top-nav-wrap {
    @apply relative flex w-full items-center justify-between gap-4 py-4 sm:py-8;
  }
  .logo {
    @apply flex items-center py-1 text-xl font-semibold sm:text-2xl;
  }
  .hamburger-menu {
    @apply inline-flex items-center justify-center rounded-md p-2 sm:hidden cursor-pointer;
    position: relative;
    z-index: 100;
  }
  .hamburger-menu svg {
    @apply h-6 w-6 scale-125 bg-amber-100;
  }

  nav {
    @apply relative ml-auto flex items-center gap-2 sm:gap-4;
    z-index: 50;
  }
  .menu-list {
    @apply absolute right-4 top-full z-50 mt-4 hidden min-w-[12rem] flex-col gap-2 rounded-lg border border-skin-border bg-skin-fill p-4 shadow-lg sm:static sm:z-auto sm:mt-0 sm:flex sm:min-w-0 sm:flex-row sm:items-center sm:gap-5 sm:border-0 sm:bg-transparent sm:p-0 sm:shadow-none;
  }
  nav ul li {
    @apply flex w-full items-center justify-start sm:w-auto sm:justify-center;
  }
  .nav-link {
    @apply w-full rounded-md px-4 py-2 text-left font-medium hover:text-skin-accent sm:w-auto sm:rounded-none sm:px-2 sm:py-1 sm:text-center;
  }
  nav a.active {
    @apply underline decoration-wavy decoration-2 underline-offset-4;
  }
  nav a.active svg {
    @apply fill-skin-accent;
  }

  nav ul button {
    @apply p-1;
  }
  nav ul button svg {
    @apply h-6 w-6 fill-skin-base hover:fill-skin-accent;
  }
  #theme-btn {
    @apply p-3 sm:p-1;
  }
  #theme-btn svg {
    @apply scale-125 hover:rotate-12 sm:scale-100;
  }

  .icon-container {
    @apply h-5 w-6 flex-col items-end justify-between;
  }
  .icon-container div {
    @apply h-0.5 bg-skin-inverted transition-all;
  }
  #first-line {
    @apply w-full bg-skin-base;
  }
  #second-line {
    @apply w-3/4 bg-skin-base;
  }
  #third-line {
    @apply w-1/2 bg-skin-base;
  }
</style>

<script is:inline>
  function setupMenu() {
    console.log("setupMenu called");
    const menuBtn = document.querySelector(".hamburger-menu");
    const menuItems = document.querySelector("#menu-items");
    
    if (!menuBtn || !menuItems) {
      console.log("Menu elements not found", {menuBtn, menuItems});
      return;
    }
    
    console.log("Menu elements found!");
    
    const iconContainer = document.querySelector(".icon-container");
    const firstLine = document.querySelector("#first-line");
    const secondLine = document.querySelector("#second-line");
    const thirdLine = document.querySelector("#third-line");

    // Toggle menu - directly on the original button
    menuBtn.onclick = function(e) {
      e.preventDefault();
      e.stopPropagation();
      console.log("Button clicked!");
      
      const menuExpanded = menuBtn.getAttribute("aria-expanded");
      console.log("Current state:", menuExpanded);
      
      if (menuExpanded === "false") {
        console.log("Opening menu...");
        menuBtn.setAttribute("aria-expanded", "true");
        menuBtn.setAttribute("aria-label", "Close Menu");
        menuItems.classList.remove("hidden");
        menuItems.classList.add("flex", "flex-col");
        menuItems.style.display = "flex";
        menuItems.style.flexDirection = "column";
        console.log("Menu classes after open:", menuItems.className);

        // icon animation
        if (iconContainer) {
          iconContainer.classList.remove("flex");
          iconContainer.classList.add("relative");
        }
        if (firstLine) {
          firstLine.classList.add("rotate-45", "absolute", "bottom-1/2");
        }
        if (thirdLine) {
          thirdLine.classList.add("hidden");
        }
        if (secondLine) {
          secondLine.classList.add("!w-full", "-rotate-45", "absolute", "bottom-1/2");
        }
      } else {
        console.log("Closing menu...");
        menuBtn.setAttribute("aria-expanded", "false");
        menuBtn.setAttribute("aria-label", "Open Menu");
        menuItems.classList.add("hidden");
        menuItems.classList.remove("flex", "flex-col");
        menuItems.style.display = "";
        console.log("Menu classes after close:", menuItems.className);

        // icon animation
        if (iconContainer) {
          iconContainer.classList.add("flex");
          iconContainer.classList.remove("relative");
        }
        if (firstLine) {
          firstLine.classList.remove("rotate-45", "absolute", "bottom-1/2");
        }
        if (thirdLine) {
          thirdLine.classList.remove("hidden");
        }
        if (secondLine) {
          secondLine.classList.remove("!w-full", "-rotate-45", "absolute", "bottom-1/2");
        }
      }
    };

    // Close menu when clicking a link (mobile only)
    const menuLinks = menuItems.querySelectorAll("a");
    menuLinks.forEach(link => {
      link.addEventListener("click", () => {
        if (window.innerWidth < 640) {
          menuBtn.setAttribute("aria-expanded", "false");
          menuBtn.setAttribute("aria-label", "Open Menu");
          menuItems.classList.add("hidden");
          menuItems.classList.remove("flex", "flex-col");
          menuItems.style.display = "";

          // Reset icon animation
          if (iconContainer) {
            iconContainer.classList.add("flex");
            iconContainer.classList.remove("relative");
          }
          if (firstLine) firstLine.classList.remove("rotate-45", "absolute", "bottom-1/2");
          if (thirdLine) thirdLine.classList.remove("hidden");
          if (secondLine) secondLine.classList.remove("!w-full", "-rotate-45", "absolute", "bottom-1/2");
        }
      });
    });
    
    console.log("Menu setup complete!");
  }

  // Run on DOMContentLoaded
  if (document.readyState === 'loading') {
    console.log("Waiting for DOM...");
    document.addEventListener('DOMContentLoaded', setupMenu);
  } else {
    console.log("DOM already loaded");
    setupMenu();
  }
  
  // Run after navigation (for Astro view transitions)
  document.addEventListener('astro:page-load', setupMenu);
</script>
